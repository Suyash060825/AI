import tensorflow as tf
from tensorflow.keras import layers,models
from tensorflow.keras.datasets import mnist
from tensorflow.keras.utils import to_categorical
import matplotlib.pyplot as plt


#print(x_train[0]),print(y_train),print(y_train[0])
(x_train,y_train),(x_test,y_test)=mnist.load_data()
x_train=x_train/255.0
x_test=x_test/255.0
y_train=to_categorical(y_train)
y_test=to_categorical(y_test)
#print(x_train),print(x_train[0])
#print(y_train[0]),print(y_train)

mlp_model=models.Sequential([
    layers.Flatten(input_shape=(28,28)),
    layers.Dense(128,activation='relu'),
    layers.Dense(64,activation='relu'),
    layers.Dense(10,activation='softmax')
])

mlp_model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])
history_mlp=mlp_model.fit(x_train,y_train,epochs=10,validation_data=(x_test,y_test))

x_train_cnn=x_train.reshape(-1,28,28,1)
x_test_cnn=x_test.reshape(-1,28,28,1)

cnn_model= models.Sequential([
    layers.Conv2D(32,(3,3),activation='relu',input_shape=(28,28,1)),
    layers.MaxPooling2D((2,2)),
    layers.Conv2D(64,(3,3),activation='relu'),
    layers.MaxPooling2D((2,2)),
    layers.Flatten(),
    layers.Dense(128,activation='relu'),
    layers.Dense(10,activation='softmax')
])

cnn_model.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'])
history_cnn=cnn_model.fit(x_train_cnn,y_train,epochs=10,validation_data=(x_test_cnn,y_test))

print("MLP Accuracy: ",mlp_model.evaluate(x_test,y_test,verbose=0)[1])
print("CNN Accuracy: ",cnn_model.evaluate(x_test_cnn,y_test,verbose=0)[1])

import numpy as np

index=7
plt.imshow(x_test[index],cmap='gray')
plt.show()

sample=x_test_cnn[index].reshape(1,28,28,1)
pred=cnn_model.predict(sample)
print("Predicted Label:",np.argmax(pred))

import numpy as np

index=6
plt.imshow(x_test[index],cmap='gray')
plt.show()

sample=x_test_cnn[index].reshape(1,28,28,1)
pred=cnn_model.predict(sample)
print("Predicted Label:",np.argmax(pred))
